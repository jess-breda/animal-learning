"""
Child class of design matrix generator that is specific to generating
design matrices with interaction terms. 
Written by Jess Breda, 2023-10-23
"""
import pandas as pd
import numpy as np
from design_matrix_generator import DesignMatrixGenerator


class DesignMatrixGeneratorInteractions(DesignMatrixGenerator):
    def __init__(self, model_type):
        super().__init__()
        self.model_type = model_type

    def generate_base_matrix(self, df, return_labels=True):
        return super().generate_base_matrix(df, self.model_type, return_labels)

    def exp_filter_column(self, X, tau, column):
        return super().exp_filter_column(X, tau, column)

    @staticmethod
    def add_interaction_terms(X, interaction_pairs):
        """
        Add interaction terms to the design matrix X.

        params
        ------
        X : pd.DataFrame
            design matrix to add interaction terms to
        interaction_pairs : list of tuples
            each tuple contains the names of two columns to interact

        returns
        -------
        X_copy : pd.DataFrame
            design matrix with interaction terms added
        """

        X_copy = X.copy()

        for pair in interaction_pairs:
            col1, col2 = pair
            interaction_term = f"{col1}_x_{col2}"
            X_copy[interaction_term] = X_copy[col1] * X_copy[col2]

        return X_copy

    def generate_design_matrix(self, df, tau, filter_column, interaction_pairs):
        """
        Function to generate design matrix with interaction terms
        and exponential filter applied to a column.

        params
        ------
        df : pd.DataFrame
            dataframe with columns `s_a` `s_b` `session`, `violation`
            `correct_side` and `choice`, likely generated by
            get_rat_viol_data() or get_rat_data()
        tau : float
            time constant for exponential filter. if tau = 0 or None,
            no filtering is applied and column is not dropped.
        column : str
            column to apply filter to
        interaction_pairs : list of tuples
            each tuple contains the names of two columns to interact
        """

        X, y = self.generate_base_matrix(df, return_labels=True)

        if tau:
            X = self.exp_filter_column(X, tau=tau, column=filter_column)

        X = self.add_interaction_terms(X, interaction_pairs)

        return X, y
